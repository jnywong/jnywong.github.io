[{"authors":null,"categories":null,"content":" Hello my name is Jenny and I am a Senior Research Software Engineer in the Advanced Research Computing department at the University of Birmingham. I collaborate with research teams across the university on coding projects and provide specialist software support. I also engage with high performance computing (HPC) user communities and enhance accessibility through delivering training and workshops, and I am a certified NVIDIA University Ambassador and Carpentries Instructor.  I believe that sustainable research software and code development should be valued as highly as academic journal papers, and I am committed to the greater recognition of research software engineering as a discipline in its own right.\n I have a strong technical background, with over 7 years engaged in STEM research activities across the UK and France. My strength is in mathematics and numerical modelling, with experience using HPC to run cutting-edge simulations.\n  Download my CV as a PDF.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Hello my name is Jenny and I am a Senior Research Software Engineer in the Advanced Research Computing department at the University of Birmingham. I collaborate with research teams across the university on coding projects and provide specialist software support.","tags":null,"title":"Jenny Wong","type":"authors"},{"authors":null,"categories":null,"content":"","date":1651449600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651449600,"objectID":"7eca1016761762a55f68f7468e8d63f9","permalink":"https://jnywong.github.io/project/carpentries-python/","publishdate":"2022-05-02T00:00:00Z","relpermalink":"/project/carpentries-python/","section":"project","summary":"Workshop materials for the Software Carpentries Python course.","tags":["teaching"],"title":"Software Carpentries - Python","type":"project"},{"authors":null,"categories":null,"content":"  \nWelcome! Here is my Julia code to simulate 2D convection in a Cartesian box. Theory and methods used can be found in Introduction to Modeling Convection in Planets and Stars: Magnetic Field, Density Stratification, Rotation.\nGetting Started Pre-requisites  Julia (version 1.6)  Package structure convect-jl docs/ src/ convect_linear.jl convect_nonlinear.jl critical_ra.jl data_utils.jl postprocess.jl routines.jl LICENSE.md README.md Examples Linear convection   Open src/convect_linear.jl\n  Specify input parameters\n  # Inputs nz = 101 # no. of vertical gridpoints nn = 30 # no. of horizontal Fourier modes (excluding zeroth mode) a = 5 # L/D aspect ratio Ra = 2700 # Rayleigh number Pr = 0.5 # Prandtl number nt = 1e5 # no. of timesteps nout = 1e3 # output every nout timesteps zeroth = 0 # include zeroth order temperature in plot? initOn = 1 saveDir = \u0026#34;/Users/wongj/Documents/convect-out/linear/2021-09-03\u0026#34;  Run script from terminal using julia \u0026lt;working directory\u0026gt;/convect-jl/src/convect_linear.jl (or from julia REPL using include(\u0026#34;\u0026lt;working directory\u0026gt;/convect-jl/src/convect_linear.jl\u0026#34;) )\n  Admire the output:\n     Nonlinear convection   Open src/convect_nonlinear.jl\n  Specify input parameters\n  # Inputs nz = 101 # no. of vertical gridpoints nn = 50 # no. of Fourier modes (excluding zeroth mode) a = 3 # L/D aspect ratio Ra = 1e6 # Rayleigh number Pr = 0.5 # Prandtl number dt = 3e-6 # timestep size nt = 1e4 # no. of timesteps nout = 1e2 # save output every nout timesteps initOn = 1 # initialise run, otherwise load existing data saveDir = \u0026#34;/Users/wongj/Documents/convect-out/2021-09-03\u0026#34; # save directory  Run script from terminal using julia \u0026lt;working directory\u0026gt;/convect-jl/src/convect_nonlinear.jl (or from julia REPL using include(\u0026#34;\u0026lt;working directory\u0026gt;/convect-jl/src/convect_nonlinear.jl\u0026#34;) )\n  Postprocess and visualise the data using julia \u0026lt;working directory\u0026gt;/convect-jl/src/postprocess.jl (or from julia REPL using include(\u0026#34;\u0026lt;working directory\u0026gt;/convect-jl/src/postprocess.jl\u0026#34;) ) with the following input parameters\n  # Inputs saveDir = \u0026#34;/Users/wongj/Documents/convect-out/2021-09-03\u0026#34; # save directory nStart = 1 nEnd = 500 zeroth= 1 # plot zeroth mode? Admire the output:     Authors  Jenny Wong - Institut des Sciences de la Terre  License This project is licensed under the MIT License - see the LICENSE.md file for details\nðŸŽ‰\n","date":1628380800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628380800,"objectID":"db272a99b85d955e58c7d65acfc7e9c3","permalink":"https://jnywong.github.io/project/convect-jl/","publishdate":"2021-08-08T00:00:00Z","relpermalink":"/project/convect-jl/","section":"project","summary":"An open source Julia code to simulate 2D convection in a Cartesian box.","tags":["research"],"title":"convect-jl","type":"project"},{"authors":null,"categories":null,"content":"     \nparopy Welcome! Here is my Python package to process data from PARODY-JA4.3 dynamo simulations with a stably-stratified F-layer at the base of the outer core.\nGetting Started Prerequisites  Python3 SHTns ChaosMagPy  Installing Conda:\nconda install -c jnywong paropy Pip:\npip install paropy Git:\nFind the Git repo here.\nWarning: IPython issue Please note that ipython may not be compatible with jedi release 0.18.0. Please revert to version 0.17.2 for auto-complete features to work (see here).\nPackage structure paropy/ docs/ paropy/ __init__.py data_utils.py plot_utils.py routines.py scripts/ convective_power.py diagnostics.py diagnostic_parameters.py filter_surface_field.py latitude_vs_Br.py latitude_vs_Br_with_CHAOS.py meridional_snapshot.py meridional_timeavg.py rotation_rate.py surface_snapshot.py surface_timeavg.py data/ CHAOS-7.7.mat LICENSE.md MANIFEST.in README.md setup.py Examples Diagnostics Example scripts can be found within the module paropy.\n  Open paropy/scripts/diagnostics.py\n  Set path to simulation data by setting\n  run_ID = \u0026lt;run_ID\u0026gt; # PARODY simulation tag directory = \u0026lt;path_to_data\u0026gt; saveDir = \u0026lt;path_to_savefigs\u0026gt;  Run paropy/scripts/diagnostics.py\n  Admire the output:\n        Meridional snapshots   Open paropy/scripts/meridional_snapshot.py\n  Set path to simulation data and snapshot time by setting\n  run_ID, timestamp = \u0026#39;c-200a\u0026#39;, \u0026#39;16.84707134\u0026#39; directory = \u0026lt;path_to_data\u0026gt; saveDir = \u0026lt;path_to_savefigs\u0026gt;  Run paropy/scripts/meridional_snapshot.py\n  Admire the output:\n     Surface snapshots   Open paropy/scripts/surface_snapshot.py\n  Set path to simulation data and snapshot time by setting\n  run_ID, timestamp = \u0026#39;c-200a\u0026#39;, \u0026#39;16.84707134\u0026#39; directory = \u0026lt;path_to_data\u0026gt; saveDir = \u0026lt;path_to_savefigs\u0026gt;  Run paropy/scripts/surface_snapshot.py\n  Admire the output:\n     Links  PyPI Anaconda Cloud  Data  CHAOS-7.7 (Finlay et al. 2020)  Authors  Jenny Wong - Institut de Physique du Globe de Paris - Institut des Sciences de la Terre  License This project is licensed under the MIT License - see the LICENSE.md file for details\nAcknowledgments  Del Duca Foundation ERC SEIC  ðŸŽ‰\n","date":1610928000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1610928000,"objectID":"c3cbf86d87b0b2a83196c30c437ff578","permalink":"https://jnywong.github.io/project/paropy/","publishdate":"2021-01-18T00:00:00Z","relpermalink":"/project/paropy/","section":"project","summary":"An open source python package to process data from PARODY-JA4.3 dynamo simulations with a stably-stratified F-layer at the base of the outer core.","tags":["research"],"title":"paropy","type":"project"},{"authors":null,"categories":null,"content":"     \nslurpy Python module to solve the 1D, steady, spherical slurry system outlined in Wong et al. (2021) (see also Wong et al. 2018).\nGetting Started Prerequisites  Python  Installing Conda:\nconda install -c jnywong nondim-slurry Pip:\npip install nondim-slurry Git:\nFind the latest version of the repository here.\nPackage structure slurpy/ __init__.py coreproperties.py data_utils.py getparameters.py lookup.py lookupdata/ denPREM.csv gravPREM.csv presPREM.csv radAK135.csv radPREM.csv vpAK135.csv vpPREM.csv plot_utils.py scripts/ parameter_search.py seismic.py sensitivity.py slurry.py Example scripts Parameter search   Open scripts/parameter_search.py\n  Enter some input parameters. For example, try:\n  # %% MODEL INPUTS # Show plots? plotOn=1 # show temp, xi, solid flux and density profiles # Input parameters layer_thicknesses=np.array([150e3]) # (m) thermal_conductivities=np.array([100.]) # (W m^-1 K^-1) icb_heatfluxes=np.array([3.4]) # (TW) csb_heatfluxes=np.array([7.4]) # (TW) h=0.05 # stepsize of heat flux through parameter space  Run parameter_search.py\n  Admire the output:\n     Sensitivity study   Open scripts/sensitivity.py\n  Enter some input parameters. For example, try:\n  # %% MODEL INPUTS # Save plot? saveOn=0 # Input parameters layer_thickness=150e3 # (m) thermal_conductivity=100. # (W m^-1 K^-1) icb_heatflux=2.5 # (TW) csb_heatflux=5.0 # (TW) h=0.05 # stepsize of heat flux through parameter space # Sensitivity study csb_temp = np.arange(4500.,6100.,100) # (K) csb_oxy = np.arange(2,12.5,0.5) # (mol.%) sed_con= np.array([1e-5,1e-4,1e-3,1e-2,1e-1]) # (kg s/m^3) pre-factor in sedimentation coefficient, b(phi)  Run sensitivity.py\n  Admire the output:\n     Links  PyPI Anaconda Cloud  Authors  Jenny Wong - University of Leeds - Institut de Physique du Globe de Paris - Institut des Sciences de la Terre Chris Davies - University of Leeds Chris Jones - University of Leeds  License This project is licensed under the MIT License - see the LICENSE.md file for details\nAcknowledgments  ERC SEIC Del Duca Foundation EPSRC Centre for Doctoral Training in Fluid Dynamics  ðŸŽ‰\n","date":1610928000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1610928000,"objectID":"c1a61aa66473b9e7d6669551b7805d76","permalink":"https://jnywong.github.io/project/slurpy/","publishdate":"2021-01-18T00:00:00Z","relpermalink":"/project/slurpy/","section":"project","summary":"An open source python package to solve the 1D, steady, spherical slurry system outlined in Wong et al. (2021) (see also Wong et al. 2018).","tags":["research"],"title":"slurpy","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://jnywong.github.io/about/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/about/","section":"","summary":"","tags":null,"title":"","type":"widget_page"}]